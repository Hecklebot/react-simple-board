{"version":3,"sources":["components/BoardList.js","redux/actions/BoardActions.js","App.js","serviceWorker.js","redux/reducers/BoardReducer.js","redux/reducers/index.js","redux/sagas/BoardSaga.js","index.js"],"names":["BoardList","getKey","id","key","posts","visible","secondModalVisible","showModal","showSecondModal","closeModal","addPost","updatePost","deletePost","inputTitle","inputContent","title","content","column","dataIndex","render","type","onClick","newPost","className","dataSource","columns","expandedRowRender","record","pagination","pageSize","onRow","onMouseEnter","onMouseLeave","Title","level","onOk","onCancel","okText","cancelText","value","placeholder","onChange","e","target","TextArea","rows","APP_INIT","ADD_POST","UPDATE_POST","DELETE_POST","SHOW_MODAL","SHOW_SECOND_MODAL","CLOSE_MODAL","INPUT_TITLE","INPUT_CONTENT","appInit","createAction","post","connect","state","BoardReducer","isLoading","dispatch","actions","payload","useEffect","a","async","axios","get","result","data","Object","values","fetchData","Boolean","window","location","hostname","match","initState","RootReducer","combineReducers","action","getIndex","findIndex","item","concat","length","Date","getTime","createdDate","toString","substring","fill","filter","parseInt","addData","updateData","deleteData","watch","postsData","getData","putData","put","patch","delete","getSecondModalValue","takeEvery","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","BoardSaga","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.710495ba.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Table, Button, Modal, Input, Typography } from 'antd';\r\n\r\nconst BoardList = ({\r\n  id,\r\n  key,\r\n  posts,\r\n  visible,\r\n  secondModalVisible,\r\n  showModal,\r\n  showSecondModal,\r\n  closeModal,\r\n  addPost,\r\n  updatePost,\r\n  deletePost,\r\n  inputTitle,\r\n  inputContent,\r\n  title,\r\n  content,\r\n}) => {\r\n  let getKey;\r\n  const column = [\r\n    { title: '번호', dataIndex: 'id', key: 'id' },\r\n    { title: '제목', dataIndex: 'title', key: 'title' },\r\n    { title: '작성일', dataIndex: 'createdDate', key: 'createdDate' },\r\n    {\r\n      title: '',\r\n      dataIndex: '',\r\n      key: '',\r\n      render: () => (\r\n        <Button type=\"danger\" onClick={() => deletePost(getKey)}>\r\n          Delete\r\n        </Button>\r\n      ),\r\n    },\r\n    {\r\n      title: '',\r\n      dataIndex: '',\r\n      key: '',\r\n      render: (column, { key, title, content }) => (\r\n        <Button type=\"primary\" onClick={() => showSecondModal({ key, title, content })}>\r\n          Update\r\n        </Button>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const newPost = {\r\n    id,\r\n    title,\r\n    content,\r\n  };\r\n\r\n  return (\r\n    <div className=\"boardList\">\r\n      <Table\r\n        dataSource={posts}\r\n        columns={column}\r\n        expandedRowRender={record => <p>{record.content}</p>}\r\n        pagination={{ pageSize: 20 }}\r\n        onRow={record => ({\r\n          onMouseEnter: () => {\r\n            getKey = record.key;\r\n          },\r\n          onMouseLeave: () => {\r\n            getKey = record.key;\r\n          },\r\n        })}\r\n      />\r\n      <Button type=\"primary\" onClick={showModal}>\r\n        새 글\r\n      </Button>\r\n\r\n      <Modal\r\n        title={<Typography.Title level={2}>Create post</Typography.Title>}\r\n        visible={visible}\r\n        onOk={() => addPost(newPost)}\r\n        onCancel={closeModal}\r\n        okText=\"작성\"\r\n        cancelText=\"취소\"\r\n      >\r\n        <Typography.Title level={4}>Title</Typography.Title>\r\n        <Input value={title} placeholder=\"제목을 입력하세요.\" onChange={e => inputTitle(e.target.value, getKey)} />\r\n        <Typography.Title level={4}>Content</Typography.Title>\r\n        <Input.TextArea value={content} rows={6} placeholder=\"내용을 입력하세요.\" onChange={e => inputContent(e.target.value, getKey)} />\r\n      </Modal>\r\n\r\n      <Modal\r\n        title={<Typography.Title level={2}>Update post</Typography.Title>}\r\n        visible={secondModalVisible}\r\n        onOk={() => updatePost({ key, title, content })}\r\n        onCancel={closeModal}\r\n        okText=\"수정\"\r\n        cancelText=\"취소\"\r\n      >\r\n        <Typography.Title level={4}>Title</Typography.Title>\r\n        <Input value={title} placeholder=\"제목을 입력하세요.\" onChange={e => inputTitle(e.target.value, key)} />\r\n        <Typography.Title level={4}>Content</Typography.Title>\r\n        <Input.TextArea value={content} rows={6} placeholder=\"내용을 입력하세요.\" onChange={e => inputContent(e.target.value, getKey)} />\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nBoardList.propTypes = {\r\n  id: PropTypes.number,\r\n  key: PropTypes.string,\r\n  posts: PropTypes.array,\r\n  visible: PropTypes.bool,\r\n  secondModalVisible: PropTypes.bool,\r\n  showModal: PropTypes.func,\r\n  showSecondModal: PropTypes.func,\r\n  closeModal: PropTypes.func,\r\n  addPost: PropTypes.func,\r\n  deletePost: PropTypes.func,\r\n  updatePost: PropTypes.func,\r\n  inputTitle: PropTypes.func,\r\n  inputContent: PropTypes.func,\r\n  title: PropTypes.string,\r\n  content: PropTypes.string,\r\n};\r\n\r\nexport default BoardList;\r\n","import { createAction } from 'redux-actions';\r\n\r\nexport const APP_INIT = 'APP_INIT';\r\nexport const ADD_POST = 'ADD_POST';\r\nexport const UPDATE_POST = 'UPDATE_POST';\r\nexport const DELETE_POST = 'DELETE_POST';\r\nexport const SHOW_MODAL = 'SHOW_MODAL';\r\nexport const SHOW_SECOND_MODAL = 'SHOW_SECOND_MODAL';\r\nexport const CLOSE_MODAL = 'CLOSE_MODAL';\r\nexport const INPUT_TITLE = 'INPUT_TITLE';\r\nexport const INPUT_CONTENT = 'INPUT_CONTENT';\r\n\r\nexport const appInit = createAction(APP_INIT, posts => posts);\r\nexport const addPost = createAction(ADD_POST, post => post);\r\nexport const updatePost = createAction(UPDATE_POST, key => key);\r\nexport const deletePost = createAction(DELETE_POST, key => key);\r\n\r\nexport const showModal = createAction(SHOW_MODAL);\r\nexport const showSecondModal = createAction(SHOW_SECOND_MODAL);\r\nexport const closeModal = createAction(CLOSE_MODAL);\r\nexport const inputTitle = createAction(INPUT_TITLE, title => title);\r\nexport const inputContent = createAction(INPUT_CONTENT, content => content);\r\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport { Typography } from 'antd';\nimport 'antd/dist/antd.css';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport BoardList from './components/BoardList';\nimport * as actions from './redux/actions/BoardActions';\n\nconst mapToStateToProps = state => {\n  const { id, isLoading, posts, title, content, visible, secondModalVisible } = state.BoardReducer;\n  return {\n    id,\n    isLoading,\n    posts,\n    title,\n    content,\n    visible,\n    secondModalVisible,\n  };\n};\n// BoardList에서 쓰는 건 BoardList에서 받기?\nconst mapDispatchToProps = dispatch => ({\n  appInit: posts => dispatch(actions.appInit(posts)),\n  addPost: post => dispatch(actions.addPost(post)),\n  updatePost: post => dispatch(actions.updatePost(post)),\n  deletePost: key => dispatch(actions.deletePost(key)),\n  showModal: () => dispatch(actions.showModal()),\n  showSecondModal: payload => {\n    dispatch(actions.showSecondModal(payload));\n  },\n  closeModal: () => dispatch(actions.closeModal()),\n  inputTitle: payload => {\n    dispatch(actions.inputTitle(payload));\n  },\n  inputContent: content => dispatch(actions.inputContent(content)),\n});\n\nconst App = ({\n  id,\n  key,\n  appInit,\n  inputTitle,\n  inputContent,\n  posts,\n  visible,\n  secondModalVisible,\n  showModal,\n  showSecondModal,\n  closeModal,\n  addPost,\n  updatePost,\n  deletePost,\n  title,\n  content,\n}) => {\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios.get('https://react-simple-board.firebaseio.com/post.json');\n      const { data } = result;\n      if (data) {\n        appInit(Object.values(data));\n      }\n    };\n\n    fetchData();\n  }, [appInit]);\n\n  return (\n    <div className=\"App\">\n      <Typography.Title level={1}>Simple Board</Typography.Title>\n      <BoardList\n        id={id}\n        key={key}\n        posts={posts}\n        visible={visible}\n        secondModalVisible={secondModalVisible}\n        showModal={showModal}\n        showSecondModal={showSecondModal}\n        closeModal={closeModal}\n        addPost={addPost}\n        updatePost={updatePost}\n        deletePost={deletePost}\n        inputTitle={inputTitle}\n        inputContent={inputContent}\n        title={title}\n        content={content}\n      />\n    </div>\n  );\n};\n\nApp.propTypes = {\n  id: PropTypes.number,\n  key: PropTypes.string,\n  appInit: PropTypes.func,\n  inputTitle: PropTypes.func,\n  inputContent: PropTypes.func,\n  posts: PropTypes.array,\n  visible: PropTypes.bool,\n  secondModalVisible: PropTypes.bool,\n  showModal: PropTypes.func,\n  showSecondModal: PropTypes.func,\n  closeModal: PropTypes.func,\n  addPost: PropTypes.func,\n  updatePost: PropTypes.func,\n  deletePost: PropTypes.func,\n  title: PropTypes.string,\n  content: PropTypes.string,\n};\n\nexport default connect(mapToStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { APP_INIT, ADD_POST, UPDATE_POST, DELETE_POST, SHOW_MODAL, CLOSE_MODAL, INPUT_TITLE, INPUT_CONTENT, SHOW_SECOND_MODAL } from '../actions/BoardActions';\r\n\r\nconst initState = {\r\n  key: 0,\r\n  id: 1,\r\n  visible: false,\r\n  secondModalVisible: false,\r\n  title: '',\r\n  content: '',\r\n  posts: [],\r\n};\r\n\r\nexport default function BoardReducer(state = initState, action) {\r\n  // const uuidv1 = require('uuid/v1');\r\n  const getIndex = state.posts.findIndex(item => item.key === state.key);\r\n  switch (action.type) {\r\n    case APP_INIT:\r\n      return {\r\n        ...state,\r\n        posts: state.posts.concat(action.payload),\r\n      };\r\n    case ADD_POST:\r\n      return {\r\n        ...state,\r\n        posts: state.posts.concat({\r\n          id: state.posts.length === 0 ? 1 : state.posts[state.posts.length - 1].id + 1,\r\n          key: new Date().getTime(),\r\n          title: state.title,\r\n          content: state.content,\r\n          createdDate: new Date().toString().substring(3, 21),\r\n        }),\r\n        id: state.id + 1,\r\n        title: '',\r\n        content: '',\r\n        visible: false,\r\n      };\r\n\r\n    case UPDATE_POST:\r\n      return {\r\n        ...state,\r\n        posts: state.posts.fill(\r\n          {\r\n            id: state.posts[getIndex].id,\r\n            key: state.posts[getIndex].key,\r\n            title: action.payload.title,\r\n            content: action.payload.content,\r\n            createdDate: state.posts[getIndex].createdDate,\r\n          },\r\n          getIndex,\r\n          getIndex + 1,\r\n        ),\r\n        secondModalVisible: false,\r\n        title: '',\r\n        content: '',\r\n      };\r\n\r\n    case DELETE_POST:\r\n      return {\r\n        ...state,\r\n        posts: state.posts.filter(item => item.key !== parseInt(action.payload, 10)),\r\n      };\r\n\r\n    case SHOW_MODAL:\r\n      return {\r\n        ...state,\r\n        visible: true,\r\n      };\r\n\r\n    case SHOW_SECOND_MODAL:\r\n      return {\r\n        ...state,\r\n        key: action.payload.key,\r\n        secondModalVisible: true,\r\n        title: action.payload.title,\r\n        content: action.payload.content,\r\n      };\r\n\r\n    case CLOSE_MODAL:\r\n      return {\r\n        ...state,\r\n        visible: false,\r\n        secondModalVisible: false,\r\n        title: '',\r\n        content: '',\r\n      };\r\n\r\n    case INPUT_TITLE:\r\n      return {\r\n        ...state,\r\n        title: action.payload,\r\n      };\r\n\r\n    case INPUT_CONTENT:\r\n      return {\r\n        ...state,\r\n        content: action.payload,\r\n      };\r\n\r\n    default:\r\n      return {\r\n        ...state,\r\n      };\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport BoardReducer from './BoardReducer';\r\n\r\nconst RootReducer = combineReducers({\r\n  BoardReducer,\r\n});\r\n\r\nexport default RootReducer;\r\n","import { takeEvery } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nlet getKey;\r\n\r\nfunction* addData(data) {\r\n  const postsData = yield axios.get(`https://react-simple-board.firebaseio.com/post.json`);\r\n  const getData = postsData.data;\r\n  // const uuidv1 = require('uuid/v1');\r\n  const putData = {\r\n    id: !getData ? 1 : Object.values(getData)[Object.values(getData).length - 1].id + 1,\r\n    key: new Date().getTime(),\r\n    title: data.payload.title,\r\n    content: data.payload.content,\r\n    createdDate: new Date().toString().substring(3, 21),\r\n  };\r\n  yield axios.put(`https://react-simple-board.firebaseio.com/post/${putData.key}.json`, putData);\r\n}\r\nfunction* updateData(post) {\r\n  yield axios.patch(`https://react-simple-board.firebaseio.com/post/${getKey}.json`, { title: post.payload.title, content: post.payload.content });\r\n}\r\nfunction* deleteData(key) {\r\n  yield axios.delete(`https://react-simple-board.firebaseio.com/post/${key.payload}.json`);\r\n}\r\n\r\nfunction getSecondModalValue(post) {\r\n  getKey = post.payload.key;\r\n}\r\n\r\nexport default function* watch() {\r\n  yield takeEvery('ADD_POST', addData);\r\n  yield takeEvery('DELETE_POST', deleteData);\r\n  yield takeEvery('UPDATE_POST', updateData);\r\n  yield takeEvery('SHOW_SECOND_MODAL', getSecondModalValue);\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport RootReducer from './redux/reducers';\nimport BoardSaga from './redux/sagas/BoardSaga';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(RootReducer, applyMiddleware(sagaMiddleware));\nsagaMiddleware.run(BoardSaga);\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}