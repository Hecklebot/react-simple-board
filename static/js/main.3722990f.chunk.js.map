{"version":3,"sources":["components/BoardList.js","redux/actions/BoardActions.js","App.js","serviceWorker.js","redux/reducers/BoardReducer.js","redux/reducers/index.js","redux/sagas/BoardSaga.js","index.js"],"names":["BoardList","getKey","id","key","isDetail","showUpdate","posts","visible","secondModalVisible","showModal","showSecondModal","closeModal","addPost","updatePost","deletePost","inputTitle","inputContent","title","content","newPost","createdDate","Date","getTime","className","dataSource","columns","dataIndex","pagination","pageSize","expandRowByClick","onRow","record","onMouseEnter","onMouseLeave","onClick","type","Title","level","onOk","onCancel","okText","cancelText","value","placeholder","onChange","e","target","TextArea","rows","footer","stopPropagation","APP_INIT","ADD_POST","UPDATE_POST","DELETE_POST","SHOW_MODAL","SHOW_SECOND_MODAL","CLOSE_MODAL","INPUT_TITLE","INPUT_CONTENT","SHOW_UPDATE","appInit","createAction","post","connect","state","BoardReducer","dispatch","actions","payload","useEffect","a","async","axios","get","result","data","Object","values","fetchData","Boolean","window","location","hostname","match","initState","RootReducer","combineReducers","action","getIndex","findIndex","item","findValue","find","concat","length","toString","substring","fill","filter","parseInt","console","debug","addData","updateData","deleteData","watch","postsData","getData","putData","put","patch","delete","getSecondModalValue","takeEvery","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","BoardSaga","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3722990f.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Table, Button, Modal, Input, Typography } from 'antd';\r\n\r\nconst BoardList = ({\r\n  id,\r\n  key,\r\n  isDetail,\r\n  showUpdate,\r\n  posts,\r\n  visible,\r\n  secondModalVisible,\r\n  showModal,\r\n  showSecondModal,\r\n  closeModal,\r\n  addPost,\r\n  updatePost,\r\n  deletePost,\r\n  inputTitle,\r\n  inputContent,\r\n  title,\r\n  content,\r\n}) => {\r\n  let getKey;\r\n\r\n  const column = [\r\n    { title: '번호', dataIndex: 'id', key: 'id' },\r\n    { title: '제목', dataIndex: 'title', key: 'title' },\r\n    { title: '작성일', dataIndex: 'createdDate', key: 'createdDate' },\r\n  ];\r\n\r\n  const newPost = {\r\n    id,\r\n    title,\r\n    content,\r\n    createdDate: new Date().getTime(),\r\n  };\r\n\r\n  return (\r\n    <div className=\"boardList\">\r\n      <Table\r\n        dataSource={posts}\r\n        columns={column}\r\n        pagination={{ pageSize: 20 }}\r\n        expandRowByClick\r\n        onRow={record => ({\r\n          onMouseEnter: () => {\r\n            getKey = record.key;\r\n          },\r\n          onMouseLeave: () => {\r\n            getKey = record.key;\r\n          },\r\n          onClick: () => {\r\n            showSecondModal(getKey);\r\n          },\r\n        })}\r\n      />\r\n      <Button type=\"primary\" onClick={showModal}>\r\n        새 글\r\n      </Button>\r\n\r\n      <Modal\r\n        title={<Typography.Title level={2}>Create post</Typography.Title>}\r\n        visible={visible}\r\n        onOk={() => addPost(newPost)}\r\n        onCancel={closeModal}\r\n        okText=\"작성\"\r\n        cancelText=\"취소\"\r\n      >\r\n        <Typography.Title level={4}>Title</Typography.Title>\r\n        <Input value={title} placeholder=\"제목을 입력하세요.\" onChange={e => inputTitle(e.target.value, getKey)} />\r\n        <Typography.Title level={4}>Content</Typography.Title>\r\n        <Input.TextArea value={content} rows={6} placeholder=\"내용을 입력하세요.\" onChange={e => inputContent(e.target.value, getKey)} />\r\n      </Modal>\r\n\r\n      <Modal\r\n        title={<Typography.Title level={2}>post detail</Typography.Title>}\r\n        visible={secondModalVisible}\r\n        footer={\r\n          isDetail ? (\r\n            <Button type=\"primary\" onClick={showUpdate}>\r\n              수정\r\n            </Button>\r\n          ) : (\r\n            [\r\n              <Button\r\n                type=\"primary\"\r\n                onClick={e => {\r\n                  const value = {\r\n                    key: getKey,\r\n                    title,\r\n                    content,\r\n                  };\r\n                  e.stopPropagation();\r\n                  updatePost(value);\r\n                }}\r\n              >\r\n                Update\r\n              </Button>,\r\n              <Button\r\n                type=\"danger\"\r\n                onClick={e => {\r\n                  e.stopPropagation();\r\n                  deletePost(getKey);\r\n                  closeModal();\r\n                }}\r\n              >\r\n                Delete\r\n              </Button>,\r\n              <Button\r\n                onClick={() => {\r\n                  closeModal();\r\n                }}\r\n              >\r\n                close\r\n              </Button>,\r\n            ]\r\n          )\r\n        }\r\n        onCancel={closeModal}\r\n        // onOk={() => updatePost({ key, title, content })}\r\n        // okText=\"수정\"\r\n        // cancelText=\"취소\"\r\n      >\r\n        {isDetail ? (\r\n          <div>\r\n            <Typography.Title level={4}>Title</Typography.Title>\r\n            <p>{title}</p>\r\n            <Typography.Title level={4}>Content</Typography.Title>\r\n            <p>{content}</p>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <Typography.Title level={4}>Title</Typography.Title>\r\n            <Input value={title} placeholder=\"제목을 입력하세요.\" onChange={e => inputTitle(e.target.value, key)} />\r\n            <Typography.Title level={4}>Content</Typography.Title>\r\n            <Input.TextArea value={content} rows={6} placeholder=\"내용을 입력하세요.\" onChange={e => inputContent(e.target.value, getKey)} />\r\n          </div>\r\n        )}\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nBoardList.propTypes = {\r\n  id: PropTypes.number,\r\n  key: PropTypes.string,\r\n  isDetail: PropTypes.bool,\r\n  posts: PropTypes.array,\r\n  visible: PropTypes.bool,\r\n  secondModalVisible: PropTypes.bool,\r\n  showModal: PropTypes.func,\r\n  showSecondModal: PropTypes.func,\r\n  closeModal: PropTypes.func,\r\n  addPost: PropTypes.func,\r\n  deletePost: PropTypes.func,\r\n  updatePost: PropTypes.func,\r\n  inputTitle: PropTypes.func,\r\n  inputContent: PropTypes.func,\r\n  title: PropTypes.string,\r\n  content: PropTypes.string,\r\n};\r\n\r\nexport default BoardList;\r\n","import { createAction } from 'redux-actions';\r\n\r\nexport const APP_INIT = 'APP_INIT';\r\nexport const ADD_POST = 'ADD_POST';\r\nexport const UPDATE_POST = 'UPDATE_POST';\r\nexport const DELETE_POST = 'DELETE_POST';\r\nexport const SHOW_MODAL = 'SHOW_MODAL';\r\nexport const SHOW_SECOND_MODAL = 'SHOW_SECOND_MODAL';\r\nexport const CLOSE_MODAL = 'CLOSE_MODAL';\r\nexport const INPUT_TITLE = 'INPUT_TITLE';\r\nexport const INPUT_CONTENT = 'INPUT_CONTENT';\r\nexport const SHOW_UPDATE = 'SHOW_UPDATE';\r\n\r\nexport const appInit = createAction(APP_INIT, posts => posts);\r\nexport const addPost = createAction(ADD_POST, post => post);\r\nexport const updatePost = createAction(UPDATE_POST, key => key);\r\nexport const deletePost = createAction(DELETE_POST, key => key);\r\n\r\nexport const showModal = createAction(SHOW_MODAL);\r\nexport const showSecondModal = createAction(SHOW_SECOND_MODAL);\r\nexport const showUpdate = createAction(SHOW_UPDATE);\r\nexport const closeModal = createAction(CLOSE_MODAL);\r\nexport const inputTitle = createAction(INPUT_TITLE, title => title);\r\nexport const inputContent = createAction(INPUT_CONTENT, content => content);\r\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport { Typography } from 'antd';\nimport 'antd/dist/antd.css';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport BoardList from './components/BoardList';\nimport * as actions from './redux/actions/BoardActions';\n\nconst mapToStateToProps = state => {\n  const { id, isDetail, posts, title, content, visible, secondModalVisible } = state.BoardReducer;\n  return {\n    id,\n    isDetail,\n    posts,\n    title,\n    content,\n    visible,\n    secondModalVisible,\n  };\n};\n// BoardList에서 쓰는 건 BoardList에서 받기?\nconst mapDispatchToProps = dispatch => ({\n  appInit: posts => dispatch(actions.appInit(posts)),\n  addPost: post => dispatch(actions.addPost(post)),\n  updatePost: post => dispatch(actions.updatePost(post)),\n  deletePost: key => dispatch(actions.deletePost(key)),\n  showModal: () => dispatch(actions.showModal()),\n  showSecondModal: payload => {\n    dispatch(actions.showSecondModal(payload));\n  },\n  closeModal: () => dispatch(actions.closeModal()),\n  inputTitle: payload => {\n    dispatch(actions.inputTitle(payload));\n  },\n  inputContent: content => dispatch(actions.inputContent(content)),\n  showUpdate: () => dispatch(actions.showUpdate()),\n});\n\nconst App = ({\n  id,\n  key,\n  isDetail,\n  showUpdate,\n  appInit,\n  inputTitle,\n  inputContent,\n  posts,\n  visible,\n  secondModalVisible,\n  showModal,\n  showSecondModal,\n  closeModal,\n  addPost,\n  updatePost,\n  deletePost,\n  title,\n  content,\n}) => {\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios.get('https://react-simple-board.firebaseio.com/post.json');\n      const { data } = result;\n      if (data) {\n        appInit(Object.values(data));\n      }\n    };\n\n    fetchData();\n  }, [appInit]);\n\n  return (\n    <div className=\"App\">\n      <Typography.Title level={1}>Simple Board</Typography.Title>\n      <BoardList\n        id={id}\n        key={key}\n        isDetail={isDetail}\n        showUpdate={showUpdate}\n        posts={posts}\n        visible={visible}\n        secondModalVisible={secondModalVisible}\n        showModal={showModal}\n        showSecondModal={showSecondModal}\n        closeModal={closeModal}\n        addPost={addPost}\n        updatePost={updatePost}\n        deletePost={deletePost}\n        inputTitle={inputTitle}\n        inputContent={inputContent}\n        title={title}\n        content={content}\n      />\n    </div>\n  );\n};\n\nApp.propTypes = {\n  id: PropTypes.number,\n  key: PropTypes.string,\n  appInit: PropTypes.func,\n  inputTitle: PropTypes.func,\n  inputContent: PropTypes.func,\n  posts: PropTypes.array,\n  visible: PropTypes.bool,\n  secondModalVisible: PropTypes.bool,\n  showModal: PropTypes.func,\n  showSecondModal: PropTypes.func,\n  closeModal: PropTypes.func,\n  addPost: PropTypes.func,\n  updatePost: PropTypes.func,\n  deletePost: PropTypes.func,\n  title: PropTypes.string,\n  content: PropTypes.string,\n  isDetail: PropTypes.bool,\n  showUpdate: PropTypes.func,\n};\n\nexport default connect(mapToStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  APP_INIT,\r\n  ADD_POST,\r\n  UPDATE_POST,\r\n  DELETE_POST,\r\n  SHOW_MODAL,\r\n  CLOSE_MODAL,\r\n  INPUT_TITLE,\r\n  INPUT_CONTENT,\r\n  SHOW_SECOND_MODAL,\r\n  SHOW_UPDATE,\r\n} from '../actions/BoardActions';\r\n\r\nconst initState = {\r\n  key: 0,\r\n  id: 1,\r\n  isDetail: true,\r\n  visible: false,\r\n  secondModalVisible: false,\r\n  title: '',\r\n  content: '',\r\n  posts: [],\r\n};\r\n\r\nexport default function BoardReducer(state = initState, action) {\r\n  const getIndex = state.posts.findIndex(item => item.key === state.key);\r\n  const findValue = state.posts.find(item => item.key === action.payload);\r\n  switch (action.type) {\r\n    case APP_INIT:\r\n      return {\r\n        ...state,\r\n        posts: state.posts.concat(action.payload),\r\n      };\r\n\r\n    case ADD_POST:\r\n      return {\r\n        ...state,\r\n        posts: state.posts.concat({\r\n          id: state.posts.length === 0 ? 1 : state.posts[state.posts.length - 1].id + 1,\r\n          key: action.payload.createdDate,\r\n          title: state.title,\r\n          content: state.content,\r\n          createdDate: new Date().toString().substring(3, 21),\r\n        }),\r\n        id: state.id + 1,\r\n        title: '',\r\n        content: '',\r\n        visible: false,\r\n      };\r\n\r\n    case UPDATE_POST:\r\n      return {\r\n        ...state,\r\n        posts: state.posts.fill(\r\n          {\r\n            id: state.posts[getIndex].id,\r\n            key: state.posts[getIndex].key,\r\n            title: action.payload.title,\r\n            content: action.payload.content,\r\n            createdDate: state.posts[getIndex].createdDate,\r\n          },\r\n          getIndex,\r\n          getIndex + 1,\r\n        ),\r\n        secondModalVisible: false,\r\n        title: '',\r\n        content: '',\r\n      };\r\n\r\n    case DELETE_POST:\r\n      return {\r\n        ...state,\r\n        posts: state.posts.filter(item => item.key !== parseInt(action.payload, 10)),\r\n      };\r\n\r\n    case SHOW_MODAL:\r\n      return {\r\n        ...state,\r\n        visible: true,\r\n      };\r\n\r\n    case SHOW_SECOND_MODAL:\r\n      return {\r\n        ...state,\r\n        key: action.payload,\r\n        secondModalVisible: true,\r\n        title: findValue.title,\r\n        content: findValue.content,\r\n      };\r\n\r\n    case CLOSE_MODAL:\r\n      return {\r\n        ...state,\r\n        visible: false,\r\n        secondModalVisible: false,\r\n        title: '',\r\n        content: '',\r\n      };\r\n\r\n    case INPUT_TITLE:\r\n      return {\r\n        ...state,\r\n        title: action.payload,\r\n      };\r\n\r\n    case INPUT_CONTENT:\r\n      return {\r\n        ...state,\r\n        content: action.payload,\r\n      };\r\n\r\n    case SHOW_UPDATE:\r\n      console.debug('showUpdate', state.isDetail);\r\n      return {\r\n        ...state,\r\n        isDetail: false,\r\n      };\r\n    default:\r\n      return {\r\n        ...state,\r\n      };\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport BoardReducer from './BoardReducer';\r\n\r\nconst RootReducer = combineReducers({\r\n  BoardReducer,\r\n});\r\n\r\nexport default RootReducer;\r\n","import { takeEvery } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nlet getKey;\r\n\r\nfunction* addData(data) {\r\n  const postsData = yield axios.get(`https://react-simple-board.firebaseio.com/post.json`);\r\n  const getData = postsData.data;\r\n  // const uuidv1 = require('uuid/v1');\r\n  const putData = {\r\n    id: !getData ? 1 : Object.values(getData)[Object.values(getData).length - 1].id + 1,\r\n    key: data.payload.createdDate,\r\n    title: data.payload.title,\r\n    content: data.payload.content,\r\n    createdDate: new Date().toString().substring(3, 21),\r\n  };\r\n  yield axios.put(`https://react-simple-board.firebaseio.com/post/${putData.key}.json`, putData);\r\n\r\n  // 임시 데이터 넣기\r\n  // for (let i = 1; i < 50; i += 1) {\r\n  //   yield axios.put(`https://react-simple-board.firebaseio.com/post/${putData.key + i}.json`, {\r\n  //     id: i,\r\n  //     key: new Date().getTime(),\r\n  //     title: `${i} temp title`,\r\n  //     content: `${i} temp content`,\r\n  //     createdDate: new Date().toString().substring(3, 21),\r\n  //   });\r\n  // }\r\n}\r\n\r\nfunction* updateData(post) {\r\n  yield axios.patch(`https://react-simple-board.firebaseio.com/post/${getKey}.json`, { title: post.payload.title, content: post.payload.content });\r\n}\r\n\r\nfunction* deleteData(key) {\r\n  yield axios.delete(`https://react-simple-board.firebaseio.com/post/${key.payload}.json`);\r\n}\r\n\r\nfunction getSecondModalValue(post) {\r\n  getKey = post.payload;\r\n}\r\n\r\nexport default function* watch() {\r\n  yield takeEvery('ADD_POST', addData);\r\n  yield takeEvery('DELETE_POST', deleteData);\r\n  yield takeEvery('UPDATE_POST', updateData);\r\n  yield takeEvery('SHOW_SECOND_MODAL', getSecondModalValue);\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport RootReducer from './redux/reducers';\nimport BoardSaga from './redux/sagas/BoardSaga';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(RootReducer, applyMiddleware(sagaMiddleware));\nsagaMiddleware.run(BoardSaga);\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}